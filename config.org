#+TITLE: Scattered Robots Emacs Config
#+AUTHOR: Scattered Robot

* PACKAGE MANAGEMENT
Setup package.el to work with MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)

#+end_src

* THEMEING
** DOOM-THEMES
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t)
  (setq doom-theme-enable-bold t
	doom-theme-enable-italic t)
  (load-theme 'doom-dracula t)
#+end_src
** DOOM-MODELINE
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35
          doom-modeline-bar-width 5
          doom-modeline-persp-name t
          doom-modeline-persp-icon t))

#+end_src

* BACKUP
Put all backupfiles in one place

#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.Trash")))

#+end_src

* COMPANY
Company is a text completion framework for Emacs.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :bind ("M-/" . company-complete-common-or-cycle) ;; overwritten by flyspell
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (compay-tooltip-align-annotationa 't)
    (global-company-mode t))

  (use-package company-box
    :ensure t
    :after company
    :hook (company-mode . company-box-mode))

#+end_src

* Diminish
Hides the mode in the modeline

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)

#+end_src

* DIRED

#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :config
    (setq dired-open-extensions '(("gif" . "sxiv")
                                  ("jpg" . "sxiv")
                                  ("png" . "sxiv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))

  (use-package peep-dired
    :ensure t
    :after dired)

#+end_src

* FLYCHECK
Linting

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode)
    :config
    (setq flycheck-display-errors-function
          #'flycheck-display-error-messages-unless-error-list)

    (setq flycheck-indication-mode nil))

  (use-package flycheck-pos-tip
  :ensure t
  :after flycheck
  :config
  (flycheck-pos-tip-mode))

#+end_src

* GRAPHICAL USER INTERFACE SETTINGS
** Disable portions of the GUI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Display line numbers and trincate lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "I know Emacs Foo!")
    (setq dashboard-startup-banner "/home/deck/Dropbox/Pictures/Icons/emacs.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 10)
                            (agenda . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (registers . 5)))
    :custom
    (dashboard-modify-headings-icons '((recents . "file-text")
                                       (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))

#+end_src
** TRANSPARENCY

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))

#+end_src

* GIT PROGRAMS
** MAGIT
A git client for emacs
#+begin_src emacs-lisp
    (use-package magit
      :ensure t)

#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Councel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :diminish
    :config (counsel-mode))

  (use-package ivy
    :ensure t
    :diminish
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list)
#+end_src

* EMACS MODES STATES
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  ;;; to stop this completing < in org mode
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  (delete-selection-mode 1)

#+end_src

#+RESULTS:
: t

* LANGUAGE SUPPORT
Any language completion will go here.
** LSP-MODE
#+begin_src emacs-lisp
    (use-package lsp-mode
    :ensure t
    :hook ((c-mode . lsp)
           (c++-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :config
    (setq lsp-keymap-prefix "C-c l")
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    (setq lsp-file-watch-threshold 15000))

  (use-package lsp-ui
    :ensure t
    :commands (lsp-ui-mode)
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-delay 0.5)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

#+end_src
** C/C++
#+begin_src emacs-lisp
  (use-package ccls
  :ensure t
  :config
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp)))
  (setq ccls-executable "/usr/local/bin/ccls")
  (setq ccls-initialization-options
	'(:index (:comments 2) :completion (:detailedLabel t))))

#+end_src

* NEOTREE
Neotree is a file tree viewer.

#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 50
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action)
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
              #'(lambda (_)
                  (with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil)))))

#+end_src

* ORG MODE
** Enabling Org Bullets
Org-bullets gives us attractive bullers rather than asterisks.
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets
      :ensure t)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** Org Tempo
Org-tempo is built into org mode it allows for insertions using <'letter' followed by a TAB to expand into block tags like source blocks. Others include:

| Typing the below + TAB | Expands to ...                            |
|------------------------+-------------------------------------------|
| <a                     | '#+Begin_export ascii' ... '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' ... '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' ... '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' ... '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' ... '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' ... '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' ... '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' ... '#+END_QUOTE          |
| <s                     | '#+BEGIN_SRC' ... '#+END_SCR'             |
| <v                     | '#+BEGIN_VERSE' ... '#+END_VERSE'         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** HIGHLIGHT TODO
Adds highlights to TODO and related words.
#+begin_src emacs-lisp
                (use-package hl-todo
                  :ensure t
                  :hook ((org-mode . hl-todo-mode)
                        (prog-mode . hl-todo-mode))
                  :config
                  (setq hl-todo-highlight-punctuation ":"
                        hl-todo-keyword-faces
                        `(("TODO"       warning bold)
                          ("FIXME"      error bold)
                          ("HACK"       font-lock-constant-face bold)
                          ("REVIEW"     font-lock-keyword-face bold)
                          ("NOTE"       success bold)
                          ("DEPRECATED" font-lock-doc-face bold))))

#+end_src

* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1))

#+end_src

* RAINBOW DELIMITERS
Adds colours to parentheses.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
          (clojure-mode . rainbow-delimiters-mode)))

#+end_src

* RAINBOW MODE
Display the actual colour as a background for any hex value (ex. #ffffff).

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish
    :hook
    ((org-mode prog-mode) . rainbow-mode))

#+end_src

* SHELLS AND TERMINALS

** Eshell
Eshell is an Emacs 'shell' that is written in ELisp.

#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src

** Vterm
Vterm is a terminal emulator within Emacs. The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term, and M-x vterm. By default the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer. I have already set it to bash (hopefully).

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
  (setq shell-file-name "/bin/sh"
        vterm-max-scrollback 5000))

#+end_src

** Vterm-Toggle
vterm-toggle toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
  (use-package vterm-toggle
    :ensure t
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))

#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t)
  (which-key-mode)

#+end_src

* LAST THINGS TO DO
** MAXIMIZE EMACS
#+begin_src emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+end_src

